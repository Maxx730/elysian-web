{"ast":null,"code":"import _classCallCheck from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ddcjkinghorn/git/elysian-web/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport LorenMap from './resources/images/CanvasMaps/Loren.png'; //Since we do not want the canvas to constantly rerender,\n//it will be the only HTML element inside of this component.\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      Window: {\n        width: -1000,\n        height: -1000\n      },\n      Position: {\n        angle: 0,\n        radius: 200,\n        centerX: -100,\n        centerY: -100,\n        top: 0,\n        left: 0\n      },\n      Animate: _this.Animate.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n      //Grab the canvas element.\n      Canvas: null,\n      Context: null\n    };\n    return _this;\n  } //On Page load we want to grab the width and\n  //height of the window so the canvas will be\n  //the size of the window.\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        Window: {\n          width: window.innerWidth,\n          height: window.innerHeight\n        },\n        Canvas: this.refs.ElysianCanvas\n      }, function () {\n        //We need to get the canvas context, which we cannot do until the\n        //canvas has actually been initialized.\n        _this2.setState({\n          Context: _this2.state.Canvas.getContext(\"2d\")\n        });\n      }); //Start the animation function while also binding in the\n      //component object.\n\n      requestAnimationFrame(this.state.Animate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"canvas\", {\n        ref: \"ElysianCanvas\",\n        width: this.state.Window.width,\n        height: this.state.Window.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"Animate\",\n    value: function Animate() {\n      //Here we are going to set up our initial canvas.\n      this.state.Context.clearRect(0, 0, this.state.Window.width, this.state.Window.height);\n      var image = new Image(LorenMap);\n      image.src = LorenMap;\n      this.state.Position.angle = (this.state.Position.angle + Math.PI / 360) % (Math.PI * 2);\n      var TempX = this.state.Position.centerX + this.state.Position.radius * Math.cos(this.state.Position.angle);\n      var TempY = this.state.Position.centerY + this.state.Position.radius * Math.sin(this.state.Position.angle);\n      this.state.Context.beginPath();\n      this.state.Context.drawImage(image, TempX, TempY);\n      this.state.Context.closePath();\n      var top = this.state.Position.top - .25;\n      this.setState({\n        Position: {\n          angle: this.state.Position.angle,\n          radius: this.state.Position.radius,\n          centerX: this.state.Position.centerX,\n          centerY: this.state.Position.centerY,\n          top: 0,\n          left: 0\n        }\n      }, function () {});\n      requestAnimationFrame(this.state.Animate);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/ddcjkinghorn/git/elysian-web/src/App.js"],"names":["React","Component","LorenMap","App","props","state","Window","width","height","Position","angle","radius","centerX","centerY","top","left","Animate","bind","Canvas","Context","setState","window","innerWidth","innerHeight","refs","ElysianCanvas","getContext","requestAnimationFrame","clearRect","image","Image","src","Math","PI","TempX","cos","TempY","sin","beginPath","drawImage","closePath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport LorenMap from './resources/images/CanvasMaps/Loren.png'\n\n//Since we do not want the canvas to constantly rerender,\n//it will be the only HTML element inside of this component.\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      Window:{\n        width:-1000,\n        height:-1000\n      },\n      Position:{\n        angle:0,\n        radius:200,\n        centerX:-100,\n        centerY:-100,\n        top:0,\n        left:0\n      },\n      Animate:this.Animate.bind(this),\n      //Grab the canvas element.\n      Canvas:null,\n      Context:null\n    }\n  }\n\n  //On Page load we want to grab the width and\n  //height of the window so the canvas will be\n  //the size of the window.\n  componentDidMount(){\n    this.setState({\n      Window:{\n        width:window.innerWidth,\n        height:window.innerHeight\n      },\n      Canvas:this.refs.ElysianCanvas\n    },() => {\n      //We need to get the canvas context, which we cannot do until the\n      //canvas has actually been initialized.\n      this.setState({\n        Context:this.state.Canvas.getContext(\"2d\")\n      })\n    })\n\n    //Start the animation function while also binding in the\n    //component object.\n    requestAnimationFrame(this.state.Animate)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <canvas ref=\"ElysianCanvas\" width={ this.state.Window.width } height={ this.state.Window.height }>\n\n        </canvas>\n      </div>\n    );\n  }\n\n  Animate(){\n    //Here we are going to set up our initial canvas.\n    this.state.Context.clearRect(0,0,this.state.Window.width,this.state.Window.height)\n\n    let image = new Image(LorenMap)\n    image.src = LorenMap\n\n    this.state.Position.angle = (this.state.Position.angle + Math.PI / 360) % (Math.PI * 2)\n    let TempX = this.state.Position.centerX + this.state.Position.radius * Math.cos(this.state.Position.angle)\n    let TempY = this.state.Position.centerY + this.state.Position.radius * Math.sin(this.state.Position.angle)\n\n    this.state.Context.beginPath()\n    this.state.Context.drawImage(image,TempX,TempY)\n    this.state.Context.closePath()\n\n    const top = this.state.Position.top - .25\n    this.setState({\n      Position:{\n        angle:this.state.Position.angle,\n        radius:this.state.Position.radius,\n        centerX:this.state.Position.centerX,\n        centerY:this.state.Position.centerY,\n        top:0,\n        left:0\n      }\n    },() => {\n\n    })\n\n    requestAnimationFrame(this.state.Animate)\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}