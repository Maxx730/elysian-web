{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\John\\\\Documents\\\\Dev\\\\elysian-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\John\\\\Documents\\\\Dev\\\\elysian-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\John\\\\Documents\\\\Dev\\\\elysian-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\John\\\\Documents\\\\Dev\\\\elysian-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\John\\\\Documents\\\\Dev\\\\elysian-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\John\\\\Documents\\\\Dev\\\\elysian-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\John\\\\Documents\\\\Dev\\\\elysian-web\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport LorenMap from './resources/images/CanvasMaps/Loren.png'; //Import our created components here.\n\nimport ElysianTopBar from './components/ElysianTopBar'; //Since we do not want the canvas to constantly rerender,\n//it will be the only HTML element inside of this component.\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      Window: {\n        width: -1000,\n        height: -1000\n      },\n      Position: {\n        angle: 0,\n        radius: 400,\n        centerX: -300,\n        centerY: -300,\n        top: 0,\n        left: 0\n      },\n      Animate: _this.Animate.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n      //Grab the canvas element.\n      Canvas: null,\n      Context: null,\n      Image: null\n    };\n    return _this;\n  } //On Page load we want to grab the width and\n  //height of the window so the canvas will be\n  //the size of the window.\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        Window: {\n          width: window.innerWidth,\n          height: window.innerHeight\n        },\n        Canvas: this.refs.ElysianCanvas\n      }, function () {\n        var image = new Image();\n        image.src = LorenMap; //We need to get the canvas context, which we cannot do until the\n        //canvas has actually been initialized.\n\n        _this2.setState({\n          Context: _this2.state.Canvas.getContext(\"2d\"),\n          Image: image\n        });\n      }); //Start the animation function while also binding in the\n      //component object.\n\n      requestAnimationFrame(this.state.Animate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(ElysianTopBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        ref: \"ElysianCanvas\",\n        width: this.state.Window.width,\n        height: this.state.Window.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"Animate\",\n    value: function Animate() {\n      //Here we are going to set up our initial canvas.\n      this.state.Context.clearRect(0, 0, this.state.Window.width, this.state.Window.height); //Calculates the circular motion.\n\n      this.state.Position.angle = (this.state.Position.angle + Math.PI / 360) % (Math.PI * 2);\n      var TempX = this.state.Position.centerX + this.state.Position.radius * Math.cos(this.state.Position.angle);\n      var TempY = this.state.Position.centerY + this.state.Position.radius * Math.sin(this.state.Position.angle); //Draws image onto the canvas.\n\n      this.state.Context.beginPath();\n      this.state.Context.drawImage(this.state.Image, TempX, TempY);\n      this.state.Context.closePath();\n      this.setState({\n        Position: {\n          angle: this.state.Position.angle,\n          radius: this.state.Position.radius,\n          centerX: this.state.Position.centerX,\n          centerY: this.state.Position.centerY,\n          top: 0,\n          left: 0\n        }\n      }, function () {});\n      requestAnimationFrame(this.state.Animate);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\John\\Documents\\Dev\\elysian-web\\src\\App.js"],"names":["React","Component","LorenMap","ElysianTopBar","App","props","state","Window","width","height","Position","angle","radius","centerX","centerY","top","left","Animate","bind","Canvas","Context","Image","setState","window","innerWidth","innerHeight","refs","ElysianCanvas","image","src","getContext","requestAnimationFrame","clearRect","Math","PI","TempX","cos","TempY","sin","beginPath","drawImage","closePath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport LorenMap from './resources/images/CanvasMaps/Loren.png'\r\n\r\n//Import our created components here.\r\nimport ElysianTopBar from './components/ElysianTopBar'\r\n\r\n//Since we do not want the canvas to constantly rerender,\r\n//it will be the only HTML element inside of this component.\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      Window:{\r\n        width:-1000,\r\n        height:-1000\r\n      },\r\n      Position:{\r\n        angle:0,\r\n        radius:400,\r\n        centerX:-300,\r\n        centerY:-300,\r\n        top:0,\r\n        left:0\r\n      },\r\n      Animate:this.Animate.bind(this),\r\n      //Grab the canvas element.\r\n      Canvas:null,\r\n      Context:null,\r\n      Image:null\r\n    }\r\n  }\r\n\r\n  //On Page load we want to grab the width and\r\n  //height of the window so the canvas will be\r\n  //the size of the window.\r\n  componentDidMount(){\r\n    this.setState({\r\n      Window:{\r\n        width:window.innerWidth,\r\n        height:window.innerHeight\r\n      },\r\n      Canvas:this.refs.ElysianCanvas\r\n    },() => {\r\n      let image = new Image();\r\n      image.src = LorenMap\r\n\r\n      //We need to get the canvas context, which we cannot do until the\r\n      //canvas has actually been initialized.\r\n      this.setState({\r\n        Context:this.state.Canvas.getContext(\"2d\"),\r\n        Image:image\r\n      })\r\n    })\r\n\r\n    //Start the animation function while also binding in the\r\n    //component object.\r\n    requestAnimationFrame(this.state.Animate)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ElysianTopBar/>\r\n        <canvas ref=\"ElysianCanvas\" width={ this.state.Window.width } height={ this.state.Window.height }>\r\n\r\n        </canvas>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  Animate(){\r\n    //Here we are going to set up our initial canvas.\r\n    this.state.Context.clearRect(0,0,this.state.Window.width,this.state.Window.height)\r\n\r\n    //Calculates the circular motion.\r\n    this.state.Position.angle = (this.state.Position.angle + Math.PI / 360) % (Math.PI * 2)\r\n    let TempX = this.state.Position.centerX + this.state.Position.radius * Math.cos(this.state.Position.angle)\r\n    let TempY = this.state.Position.centerY + this.state.Position.radius * Math.sin(this.state.Position.angle)\r\n    //Draws image onto the canvas.\r\n    this.state.Context.beginPath()\r\n    this.state.Context.drawImage(this.state.Image,TempX,TempY)\r\n    this.state.Context.closePath()\r\n    this.setState({\r\n      Position:{\r\n        angle:this.state.Position.angle,\r\n        radius:this.state.Position.radius,\r\n        centerX:this.state.Position.centerX,\r\n        centerY:this.state.Position.centerY,\r\n        top:0,\r\n        left:0\r\n      }\r\n    },() => {\r\n\r\n    })\r\n\r\n    requestAnimationFrame(this.state.Animate)\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}