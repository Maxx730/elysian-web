{"ast":null,"code":"import _classCallCheck from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ddcjkinghorn/git/elysian-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ddcjkinghorn/git/elysian-web/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport LorenMap from './resources/images/CanvasMaps/Loren.png'; //Since we do not want the canvas to constantly rerender,\n//it will be the only HTML element inside of this component.\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      Window: {\n        width: 0,\n        height: 0\n      },\n      Position: {\n        top: 20,\n        left: 20\n      },\n      Animate: _this.Animate.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n      //Grab the canvas element.\n      Canvas: null,\n      Context: null\n    };\n    return _this;\n  } //On Page load we want to grab the width and\n  //height of the window so the canvas will be\n  //the size of the window.\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        Window: {\n          width: window.innerWidth,\n          height: window.innerHeight\n        },\n        Canvas: this.refs.ElysianCanvas\n      }, function () {\n        //We need to get the canvas context, which we cannot do until the\n        //canvas has actually been initialized.\n        _this2.setState({\n          Context: _this2.state.Canvas.getContext(\"2d\")\n        });\n      }); //Start the animation function while also binding in the\n      //component object.\n\n      requestAnimationFrame(this.state.Animate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"canvas\", {\n        ref: \"ElysianCanvas\",\n        width: this.state.Window.width,\n        height: this.state.Window.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"Animate\",\n    value: function Animate() {\n      //Here we are going to set up our initial canvas.\n      this.state.Context.clearRect(0, 0, this.state.Window.width, this.state.Window.height);\n      var image = new Image(LorenMap);\n      image.src = LorenMap;\n      this.state.Context.beginPath();\n      this.state.Context.drawImage(image, this.state.Position.top, this.state.Position.left);\n      this.state.Context.closePath();\n      var top = this.state.Position.top - .25;\n      this.setState({\n        Position: {\n          top: top,\n          left: this.state.Position.left - .25\n        }\n      }, function () {});\n      requestAnimationFrame(this.state.Animate);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/ddcjkinghorn/git/elysian-web/src/App.js"],"names":["React","Component","LorenMap","App","props","state","Window","width","height","Position","top","left","Animate","bind","Canvas","Context","setState","window","innerWidth","innerHeight","refs","ElysianCanvas","getContext","requestAnimationFrame","clearRect","image","Image","src","beginPath","drawImage","closePath"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,yCAArB,C,CAEA;AACA;;IACMC,G;;;;;AACJ,eAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,6EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAC;AACLC,QAAAA,KAAK,EAAC,CADD;AAELC,QAAAA,MAAM,EAAC;AAFF,OADI;AAKXC,MAAAA,QAAQ,EAAC;AACPC,QAAAA,GAAG,EAAC,EADG;AAEPC,QAAAA,IAAI,EAAC;AAFE,OALE;AASXC,MAAAA,OAAO,EAAC,MAAKA,OAAL,CAAaC,IAAb,uDATG;AAUX;AACAC,MAAAA,MAAM,EAAC,IAXI;AAYXC,MAAAA,OAAO,EAAC;AAZG,KAAb;AAHgB;AAiBjB,G,CAED;AACA;AACA;;;;;wCACmB;AAAA;;AACjB,WAAKC,QAAL,CAAc;AACZV,QAAAA,MAAM,EAAC;AACLC,UAAAA,KAAK,EAACU,MAAM,CAACC,UADR;AAELV,UAAAA,MAAM,EAACS,MAAM,CAACE;AAFT,SADK;AAKZL,QAAAA,MAAM,EAAC,KAAKM,IAAL,CAAUC;AALL,OAAd,EAME,YAAM;AACN;AACA;AACA,QAAA,MAAI,CAACL,QAAL,CAAc;AACZD,UAAAA,OAAO,EAAC,MAAI,CAACV,KAAL,CAAWS,MAAX,CAAkBQ,UAAlB,CAA6B,IAA7B;AADI,SAAd;AAGD,OAZD,EADiB,CAejB;AACA;;AACAC,MAAAA,qBAAqB,CAAC,KAAKlB,KAAL,CAAWO,OAAZ,CAArB;AACD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,GAAG,EAAC,eAAZ;AAA4B,QAAA,KAAK,EAAG,KAAKP,KAAL,CAAWC,MAAX,CAAkBC,KAAtD;AAA8D,QAAA,MAAM,EAAG,KAAKF,KAAL,CAAWC,MAAX,CAAkBE,MAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAOD;;;8BAEQ;AACP;AACA,WAAKH,KAAL,CAAWU,OAAX,CAAmBS,SAAnB,CAA6B,CAA7B,EAA+B,CAA/B,EAAiC,KAAKnB,KAAL,CAAWC,MAAX,CAAkBC,KAAnD,EAAyD,KAAKF,KAAL,CAAWC,MAAX,CAAkBE,MAA3E;AAEA,UAAIiB,KAAK,GAAG,IAAIC,KAAJ,CAAUxB,QAAV,CAAZ;AACAuB,MAAAA,KAAK,CAACE,GAAN,GAAYzB,QAAZ;AAEA,WAAKG,KAAL,CAAWU,OAAX,CAAmBa,SAAnB;AACA,WAAKvB,KAAL,CAAWU,OAAX,CAAmBc,SAAnB,CAA6BJ,KAA7B,EAAmC,KAAKpB,KAAL,CAAWI,QAAX,CAAoBC,GAAvD,EAA2D,KAAKL,KAAL,CAAWI,QAAX,CAAoBE,IAA/E;AACA,WAAKN,KAAL,CAAWU,OAAX,CAAmBe,SAAnB;AAGA,UAAMpB,GAAG,GAAG,KAAKL,KAAL,CAAWI,QAAX,CAAoBC,GAApB,GAA0B,GAAtC;AACA,WAAKM,QAAL,CAAc;AACZP,QAAAA,QAAQ,EAAC;AACPC,UAAAA,GAAG,EAACA,GADG;AAEPC,UAAAA,IAAI,EAAC,KAAKN,KAAL,CAAWI,QAAX,CAAoBE,IAApB,GAA2B;AAFzB;AADG,OAAd,EAKE,YAAM,CAEP,CAPD;AASAY,MAAAA,qBAAqB,CAAC,KAAKlB,KAAL,CAAWO,OAAZ,CAArB;AACD;;;;EA5EeX,S;;AA+ElB,eAAeE,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport LorenMap from './resources/images/CanvasMaps/Loren.png'\n\n//Since we do not want the canvas to constantly rerender,\n//it will be the only HTML element inside of this component.\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      Window:{\n        width:0,\n        height:0\n      },\n      Position:{\n        top:20,\n        left:20\n      },\n      Animate:this.Animate.bind(this),\n      //Grab the canvas element.\n      Canvas:null,\n      Context:null\n    }\n  }\n\n  //On Page load we want to grab the width and\n  //height of the window so the canvas will be\n  //the size of the window.\n  componentDidMount(){\n    this.setState({\n      Window:{\n        width:window.innerWidth,\n        height:window.innerHeight\n      },\n      Canvas:this.refs.ElysianCanvas\n    },() => {\n      //We need to get the canvas context, which we cannot do until the\n      //canvas has actually been initialized.\n      this.setState({\n        Context:this.state.Canvas.getContext(\"2d\")\n      })\n    })\n\n    //Start the animation function while also binding in the\n    //component object.\n    requestAnimationFrame(this.state.Animate)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <canvas ref=\"ElysianCanvas\" width={ this.state.Window.width } height={ this.state.Window.height }>\n\n        </canvas>\n      </div>\n    );\n  }\n\n  Animate(){\n    //Here we are going to set up our initial canvas.\n    this.state.Context.clearRect(0,0,this.state.Window.width,this.state.Window.height)\n\n    let image = new Image(LorenMap)\n    image.src = LorenMap\n\n    this.state.Context.beginPath()\n    this.state.Context.drawImage(image,this.state.Position.top,this.state.Position.left)\n    this.state.Context.closePath()\n\n\n    const top = this.state.Position.top - .25\n    this.setState({\n      Position:{\n        top:top,\n        left:this.state.Position.left - .25\n      }\n    },() => {\n\n    })\n\n    requestAnimationFrame(this.state.Animate)\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}